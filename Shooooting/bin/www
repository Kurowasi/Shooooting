#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Shooooting:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//- Create Socket.io ----------------------------------------------------------------------//
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//- require Module ---------------------------------------------------------------------------//
var CANVAS = require("./Canvas.js");
var Chara = require("./chara.js");
var Enemy = require("./enemy.js");

//- Socket.io Connection -------------------------------------------------------------------//
io.sockets.on('connection', function (socket) {
    var timer = 0;
    var loop = setInterval(mainLoop, 16);
    function mainLoop(){
        timer++;
        
        //make enemy
        if(timer % 100 == 0){
            Enemy.makeEnemy();
        }
     
        // update chara shot
        Chara.updateCharaShots();
        
        // update enemy
        Enemy.update();

        // socket emit
        socket.emit("Background", CANVAS.returnCanvas());
        socket.emit("Chara", Chara.returnChara());
        socket.emit("Enemy", Enemy.returnEnemies());
        
    }
    socket.on("mouseX", function(mouseX){
        Chara.setCharaX(mouseX);
    });
    socket.on("mouseY", function(mouseY){
        Chara.setCharaY(mouseY);
    });
    socket.on("mouseDown", function(){
        Chara.makeShot();
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



