#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Shooooting:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//- Create Socket.io ----------------------------------------------------------------------//
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//- require Module ---------------------------------------------------------------------------//
var CANVAS = require("./Canvas.js");
var Chara = require("./chara.js");
var Enemy = require("./enemy.js");
var fs = require('fs');
var count = 0;
//- Socket.io Connection -------------------------------------------------------------------//
io.sockets.on('connection', function (socket) {
    count++;
    //- local variables ----------------------------------------------------------------//
    var timer = 0;  
    var loop = setInterval(mainLoop, 16);
    var charas;
    //- readFile -------------------------------------------------------------------------//
    fs.readFile('Point.txt', 'utf8', function(err, t){
        'use strict';
        // ,ごとに区切って配列を作る
        var text = t.split(",");
        // 『・』という邪魔なものが入っているので取り除く
        text[0] = text[0].substr(1);
        // 配列の中身が文字列なので数字に変換
        for(var i = 0; i < text.length; i++){
            text[i] = parseInt(text[i]);
        }
        // 選択ソート
        var num;
        for(var i = 0; i < text.length - 1; i++){
            for(var j = i + 1; j < text.length; j++){
                if(text[i] < text[j]){
                    num = text[i];
                    text[i] = text[j];
                    text[j] = num;
                }
            }
        }
        /*
        // 10位までしかいらないので、ほかの配列を削除
        text.splice(10, text.length);
        // 現時点の状態を書き込む
        fs.writeFile('Point.txt', "");
        for(var i = 0; i < text.length; i++){
            fs.appendFile('Point.txt', text[i] + ",");
        }
        */
        socket.emit("Rankings", text);
    });
    //- make chara --------------------------------------------------------------------//
    Chara.makeChara(socket.id);
    //- mainloop function -------------------------------------------------------------//
    function mainLoop(){
        timer++;
        
        //reset timer
        if(timer >= 100000000){
            timer = 0;
        }
        
        //make enemy
        if(timer % 100 == 0){
            Enemy.makeEnemy();
        }
        if(timer % 200 == 0){
            Enemy.makeEnemy01();
        }
        if(timer % 300 == 0){
            Enemy.makeEnemy02();
        }
        if(timer % 400 == 0){
            Enemy.makeEnemy03();
        }
        
        // update chara
        charas = Chara.returnCharas();
        
        // update chara
        charas.forEach(function(c, i){
            'use strict';
            if(c.hp <= 0){
                if(c.id == socket.id){
                    socket.emit("Result", c.point);
                    fs.appendFile('Point.txt', c.point + ",");
                    socket.disconnect();
                }
            }
            // update chara shots
            c.updateShots();
        });
        
        // update enemy
        Enemy.update();
        
        // socket emit
        socket.emit("Background", CANVAS.returnCanvas());
        socket.emit("Chara", Chara.returnCharas());
        socket.emit("Enemy", Enemy.returnEnemies());
        socket.emit("Shots", Enemy.returnShots());
    }
    
    socket.on("mouseX", function(mouseX){
        charas.forEach(function(c, i){
            'use strict';
            if(socket.id == c.id){
                c.x = Math.min(mouseX, 900 - c.w);
            }
        });
    });
    socket.on("mouseY", function(mouseY){
        charas.forEach(function(c, i){
            'use strict';
            if(socket.id == c.id){
                c.y = Math.min(mouseY, 600 - c.h);
            }
        });
    });
    socket.on("mouseDown", function(){
        charas.forEach(function(c, i){
            'use strict';
            if(socket.id == c.id){
                c.makeShot();
            }
        });
    });
    
    socket.on("disconnect", function(){
        'use strict';
        count--;
        //reset loop
        if(count == 0){
            timer = 0;
            Enemy.deleteEnemy();
            Enemy.deleteShot();

            //- readFile -------------------------------------------------------------------------//
            fs.readFile('Point.txt', 'utf8', function(err, t){
                'use strict';
                // ,ごとに区切って配列を作る
                var text = t.split(",");
                console.log(text);
                // 『・』という邪魔なものが入っているので取り除く
                text[0] = text[0].substr(1);
                // 配列の中身が文字列なので数字に変換
                for(var i = 0; i < text.length; i++){
                    text[i] = parseInt(text[i]);
                }
                // 選択ソート
                var num;
                for(var i = 0; i < text.length - 1; i++){
                    for(var j = i + 1; j < text.length; j++){
                        if(text[i] < text[j]){
                            num = text[i];
                            text[i] = text[j];
                            text[j] = num;
                        }
                    }
                }
                console.log(text);
                // 10位までしかいらないので、ほかの配列を削除
                text.splice(10, text.length);
                console.log(text);
                // 現時点の状態を書き込む
                fs.writeFile('Point.txt', "");
                for(var i = 0; i < text.length; i++){
                    fs.appendFile('Point.txt', text[i] + ",");
                }
            });

        }
        clearInterval(loop);
        charas.forEach(function(c, i){
            'use strict';
            if(c.id == socket.id){
                charas.splice(i, 1);
            }
        });
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



